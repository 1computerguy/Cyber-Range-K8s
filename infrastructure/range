#!/bin/bash

# Usage output
usage() {

}

# Sub-Option specific usage for "range web" command
web_usage() {

}


# Array check for use in other sections
is_array() {
  #detect if arg is an array, returns 0 on sucess, 1 otherwise
  [ -z "$1" ] && return 1
  if [ -n "$BASH" ]; then
      declare -p ${1} 2> /dev/null | grep 'declare \-a' >/dev/null && return 0
  fi
  return 1
}



# Set necessary environment variables to run range services
config() {

  echo ""
}

# Perform specified action against all services
all() {
  local action="$1"
  case $action in
    build )
        
        ;;
    start )
      if [ "$CONFIG_DIR" == "" ]
      then
          echo "This Range has not been configured yet, please resolve this by running:"
          echo -e "   range config"
      fi
      declare -a deployments=`kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
      if [ ${#deployments[@]} -eq 0 ]
      then
          kubectl create -f $CONFIG_DIR/deploy/
      else
          for dep in ${deployments[@]}
          do
              kubectl scal deployment $dep --replicas=1
          done
      fi
      ;;
    stop )
      for dep in `kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
      do
          kubectl scale deployment $dep --replicas=0
      done
      ;;
    remove )
      for dep in `kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
      do
          kubectl delete deployment $dep
      done
      ;;
    reset )
      echo ""
      echo "**********************************************************************************"
      echo "*                                 WARNING                                        *"
      echo "**********************************************************************************"
      echo ""
      echo "You are about to reset the entire range configuration!!"
      echo "This includes removing all containers, all service content, and configurations!"
      echo "If all you want to do is to reset service content, then run the following command:"
      echo ""
      echo -e "   range <svc> reset"
      echo ""
      echo ""
      echo "NOTE: This will not affect the Kubernetes configuration, just the range. If you wish"
      echo -e "   to clear that config, execute the following kubeadm command after reset."
      echo ""
      echo -e "   sudo kubeadm reset"
      echo ""
      echo "**********************************************************************************"
      echo "*                                 WARNING                                        *"
      echo "**********************************************************************************"

      # Ask if user is sure before removing all range content
      read -p "Are you sure? (y/N) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]
      then
        # Delete all deployments
        echo "Deleting all running deployments..."
        echo ""
        for dep in `kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
        do
            kubectl delete deployment $dep
        done

        # Wait for all deployments to terminate
        while [ "$(kubectl get deployments)" != "" ]
        do
            sleep 10
        done

        # Reset Kubernetes
        echo "Resetting kubernetes configuration"
        echo ""
        sudo kubeadm reset

        # Delete currently unused container images
        echo "Removing all currently unused Docker containers..."
        echo ""
        docker rmi $(docker images -a -q)

        # Stop all running Docker containers
        echo "Stoping and removing any additional running Containers..."
        echo ""
        docker stop $(docker ps -a -q)
        docker rm $(docker ps -a -q)

        # Delete remaining Docker Containers
        echo "Removing remaining Docker images..."
        echo ""
        docker rmi $(docker images -a -q)

        # Remove all downloaded range content
        echo "Removing all downloaded range content..."
        echo ""
        sudo rm -rf $RANGE_HOME

        # Remove CA
        echo "Removing root and intermediate CAs"
        echo ""
        sudo rm -rf /CA_HOME

        # Remove environment configuration
        echo "Clearing range configuration data..."
        echo ""
        rm ~/.bashrc
        mv ~/.bashrc.bak ~/.bashrc
      fi

      echo "Range environment is cleared and the system requires a reboot."
      read -p "Do you want to reboot now? (Y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]
      then
          sudo reboot
      else
          echo "Please reboot at your earliest convience to finish cleaning up the configuration."
          echo ""
      fi
      ;;
    backup )
      shift
      # TODO
      # FINISH BACKUP AND RESTORE FUNCTIONS

      # Backup currently running configuration to include configuration files, deployment descriptions,
      # and current build files.
      date_stamp=`date '+%Y%m%d-%H%M'`
      BACKUP_FOLDER="$RANGE_HOME/configs/backup/date_stamp"
      mkdir $BACKUP_FOLDER

      if [ "$1" == "" ]
      then
          DEP_BACKUP_FILE="$BACKUP_FOLDER/deployment-backup.yml"
      else
          DEP_BACKUP_FILE="$BACKUP_FOLDER/$1"
      fi

      # Create empty file for backup
      echo "" > "$DEP_BACKUP_FILE"

      # Write deployment yaml contents to backup_file
      for dep in `kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
      do
          echo "---" >> "$DEP_BACKUP_FILE"
          kubectl get deployment $dep -o yaml >> "$DEP_BACKUP_FILE"
      done

      cloud_storage "$action" "$BACKUP_FOLDER"
      dns "$action" "$BACKUP_FOLDER"
      ftp "$action" "$BACKUP_FOLDER"
      mail "$action" "$BACKUP_FOLDER"
      metasploit "$action" "$BACKUP_FOLDER"
      network "$action" "$BACKUP_FOLDER"
      ntp "$action" "$BACKUP_FOLDER"
      tor "$action" "$BACKUP_FOLDER"
      vpn "$action" "$BACKUP_FOLDER"
      all_vuln "$action" "$BACKUP_FOLDER"
      web "$action" "$BACKUP_FOLDER"
      webmail "$action" "$BACKUP_FOLDER"
      ;;
    restore )
      shift
      if [ "$1" == "" ]
      then
          echo "Please provide the folder location of the Backup you wish to restore from."
      else
          echo "!!!! Performing a <range all restore> will remove all currently Deployed Pods and settings !!!!"
          echo ""
          read -p "Are you sure you want to continue? (Y/n) " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]
          then
              read -p "Do you want to BACKUP your current configuration before restoring? (Y/n) " -n 1 -r
              echo
              if [[ $REPLY =~ ^[Yy]$ ]]
              then
                  range all backup
              fi

              $RESTORE_FOLDER="$1"

              # Delete all deployments
              echo "Deleting all running deployments..."
              echo ""
              for dep in `kubectl get deployments | awk 'FNR == 1 {next} {print $1}'`
              do
                  kubectl delete deployment $dep
              done
              
              cloud_storage "$action" "$RESTORE_FOLDER"
              dns "$action" "$RESTORE_FOLDER"
              ftp "$action" "$RESTORE_FOLDER"
              mail "$action" "$RESTORE_FOLDER"
              metasploit "$action" "$RESTORE_FOLDER"
              network "$action" "$RESTORE_FOLDER"
              ntp "$action" "$RESTORE_FOLDER"
              tor "$action" "$RESTORE_FOLDER"
              vpn "$action" "$RESTORE_FOLDER"
              all_vuln "$action" "$RESTORE_FOLDER"
              web "$action" "$RESTORE_FOLDER"
              webmail "$action" "$RESTORE_FOLDER"

              kubectl create -f $RESTORE_FOLDER/deployment-backup.yml
          fi
      fi
      ;;
  esac
}

# Perform specified action against Cloud Storage
# For the purposes of this range, NextCloud is used, but any cloud storage service
# will work such as OwnCloud, etc.
cloud_storage() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

# Perform specified action against DNS servers or services
dns() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

ftp() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
esac
}

logging() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

mail() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

metasploit() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

network() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

ntp() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

tor() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

vpn() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

all_vuln() {
  local action="$1"
  echo $action"ing Damn Vulnerable Web App"
  dvwa "$action"

  echo $action"ing Juice Shop"
  juiceshop "$action"

  echo $action"ing Mutillidae"
  mutillidae "$action"

  echo $action"ing NodeGoat"
  nodegoat "$action"

  echo $action"ing Security Shepherd"
  sec-shepherd "$action"

  echo $action"ing WebGoat"
  webgoat "$action"

  echo $action"ing Vulnerable Wordpress"
  wordpress "$action"
}

dvwa() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

juiceshop() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

mutillidae() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

nodegoat() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

sec-shepherd() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

webgoat() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

wordpress() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

web() {
  local action="$1"
  sites=${!2[@]}
  if [ "$action" == "add" ]
  then

  elif [ "$action" == "update" ]
  then

  fi
      for site in ${sites[@]}
      do
          #docker run --rm -i --init -d -e URL="$site" --cap-add=SYS_ADMIN -v $SHARE_DIR/web/output --name get-$site puppeteer-chrome-linux:scraper node -e "`cat $CONFIG_DIR/scrape.js`"
          docker run --rm -i --init -d -e URL="$site" -u root --cap-add=SYS_ADMIN -v $RANGE_HOME/web:/web/output --name get-$site puppeteer-chrome-linux:scraper node -e "`cat $CONFIG_DIR/infrastructure/scraper/scrape.js`"
      done
    cd $INTERMED_CA_DIR
    openssl req -out csr/"$site".csr.pem -newkey rsa:2048 -nodes -keyout private/"$site".com.key.pem -config $INTERMED_CA_CNF
    openssl ca -config $INTERMED_CA_CNF -extensions server_cert -days 3750 -notext -md sha512 -in csr/"$site".csr.pem -out certs/"$site".crt.pem
  # To do https for sites:
  # 1) cd into ~/dummy_ca directory
  # 2) openssl genrsa -out pki/intermediate/private/<fqdn>.key.pem 2048
  # 3) openssl req -config pki/intermediate/openssl.cnf -key pki/intermediate/private/<fqdn>.key.pem -new -sha256 -out pki/intermediate/csr/<fqdn>.csr.pem -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com"
  # 4) 

}

webmail() {
  local action="$1"
  case $action in
    build )
        ;;
    start )
        ;;
    stop )
        ;;
    backup )
        ;;
    reset )
        ;;
    restore )
        ;;
  esac
}

# Set arguments as variables for use in the script
if [ $# -gt 1 ]
then
  while [ "$1" != "" ]
  do
    case $1 in
      all )
        shift
        all "$1"
        ;;
      cloud )
        shift
        cloud_storage "$1"
        ;;
      d | dns )
        shift
        dns "$1"
        ;;
      f | ftp )
        shift
        ftp "$1"
        ;;
      log | logging )
        shift
        logging "$1"
        ;;
      ma | mail )
        shift
        mail "$1"
        ;;
      meta | metasploit )
        shift
        metasploit "$1"
        ;;
      net | network )
        shift
        network "$1"
        ;;
      nt | ntp )
        shift
        ntp "$1"
        ;;
      t | tor )
        shift
        tor "$1"
        ;;
      vp | vpn )
        shift
        vpn "$1"
        ;;
      vu | vulnerable )
        shift
        case $1 in
          all )
            all_vuln "$1"
            ;;
          dvwa )
            shift
            dvwa "$1"
            ;;
          juiceshop )
            shift
            juice_shop "$1"
            ;;
          mutillidae )
            shift
            mutillidae "$1"
            ;;
          nodegoat )
            shift
            nodegoat "$1"
            ;;
          sec-shepherd )
            shift
            sec_shepherd "$1"
            ;;
          webgoat )
            shift
            webgoat "$1"
            ;;
          wordpress )
            shift
            vuln_wordpress "$1"
            ;;
          * )
            usage
            ;;
        esac
        ;;
        web )
          shift
          case $1 in
            add | update | remove | stop | start )
              action="$1"
              shift
              case $1 in
                # Present a newline delimited file for URLs to download/update/start/stop
                -f | --file )
                  shift
                  readarray -t file < "$1"
                  web "$action" "${file[@]}"
                  ;;
                # Run the default 15 sites
                default )
                  readarray -t file < "$RANGE_HOME/web/default"
                  web "$action" "${file[@]}"
                  ;;
                # Run a space delimited list of websites of the user's choice.
                # Designed for on-the-fly operations without creating/modifying a file
                # just to manage sites.
                * )
                  while [ "$1" != "" ]
                  do
                      declare -a $site_to_download=("$1")
                      shift
                  done
                  web "$action" "${site_to_download[@]}"
                  ;;
              esac
              ;;
            * )
                web_usage
                ;;
          esac
          ;;
        webm | webmail )
          shift
          webmail "$1"
          ;;
        -h | h | --help | help )
          usage
          ;;
        * )
          usage
          ;;
    esac
  done
else
    usage
fi
